{{define "home"}}

<div id="homeBody">
	<div class="ui segment center">
		<div id="chart"></div>
	</div>
</div>

<script>

    var margin = {top: 20, right: 20, bottom: 30, left: 50},
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

	var dateFormat = d3.timeFormat("%d-%b-%y"),
        parseDate = d3.timeParse("%d-%b-%y"),
        valueFormat = d3.format(',.2f');

    var x = techan.scale.financetime()
            .range([0, width]);

    var y = d3.scaleLinear()
            .range([height, 0]);

    var candlestick = techan.plot.candlestick()
            .xScale(x)
            .yScale(y);

	var tradearrow = techan.plot.tradearrow()
         .xScale(x)
         .yScale(y)
         .orient(function(d) { return d.type.startsWith("buy") ? "up" : "down"; })
         // .on("mouseenter", enterArrow)
         // .on("mouseout", outArrow);

    var xAxis = d3.axisBottom()
            .scale(x);

	var xTopAxis = d3.axisTop(x);

    var yRightAxis = d3.axisRight(y);

    var yAxis = d3.axisLeft()
            .scale(y);

    var svg = d3.select("#chart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	var coordsText = svg.append('text')
        .style("text-anchor", "end")
        .attr("class", "coords")
        .attr("x", width - 5)
        .attr("y", 15);

	//cross:
	var ohlcAnnotation = techan.plot.axisannotation()
		.axis(yAxis)
		.orient('left')
		.format(d3.format(',.2f'));

	var ohlcRightAnnotation = techan.plot.axisannotation()
            .axis(yRightAxis)
            .orient('right')
            .translate([width, 0]);

	var timeAnnotation = techan.plot.axisannotation()
			.axis(xAxis)
			.orient('bottom')
			.format(d3.timeFormat('%Y-%m-%d'))
			.width(65)
			.translate([0, height]);

	var timeTopAnnotation = techan.plot.axisannotation()
        .axis(xTopAxis)
        .orient('top');

	var crosshair = techan.plot.crosshair()
         .xScale(x)
         .yScale(y)
         .xAnnotation([timeAnnotation, timeTopAnnotation])
         .yAnnotation([ohlcAnnotation, ohlcRightAnnotation])
         .on("enter", enter)
         .on("out", out)
         .on("move", move);
		//end cross


	//trade arrow text?
	var valueText = svg.append('text')
        .style("text-anchor", "end")
        .attr("class", "coords")
        .attr("x", width - 5)
        .attr("y", 15);

    d3.csv("/public/data.csv", function(error, data) {
        var accessor = candlestick.accessor();

        data = data.slice(0, 200).map(function(d) {
            return {
                date: parseDate(d.Date),
                open: +d.Open,
                high: +d.High,
                low: +d.Low,
                close: +d.Close,
                volume: +d.Volume
            };
        }).sort(function(a, b) { return d3.ascending(accessor.d(a), accessor.d(b)); });

		//cross
		x.domain(data.map(accessor.d));
		y.domain(techan.scale.plot.ohlc(data, accessor).domain());

		//trade arrows:
		var trades = [
			{ date: data[67].date, type: "buy", price: data[67].low, quantity: 1000 },
			{ date: data[100].date, type: "sell", price: data[100].high, quantity: 200 },
			{ date: data[156].date, type: "buy", price: data[156].open, quantity: 500 },
			{ date: data[167].date, type: "sell", price: data[167].close, quantity: 300 },
			{ date: data[187].date, type: "buy-pending", price: data[187].low, quantity: 300 }
		];

        svg.append("g")
                .attr("class", "candlestick");

		//trade arrow class:
		svg.append("g")
                .attr("class", "tradearrow");

        svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")");

        svg.append("g")
                .attr("class", "y axis")
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Price ($)");

		svg.append("g")
                .attr("class", "y annotation left")
                .datum([{value: 74}, {value: 67.5}, {value: 58}, {value:40}]) // 74 should not be rendered
                .call(ohlcAnnotation);

        svg.append("g")
                .attr("class", "x annotation bottom")
                .datum([{value: x.domain()[30]}])
                .call(timeAnnotation);

		svg.append('g')
                .attr("class", "crosshair")
                .datum({ x: x.domain()[80], y: 67.5 })
                .call(crosshair)
                .each(function(d) { move(d); }); // Display the current data

        svg.append('text')
                .attr("x", 5)
                .attr("y", 15)
                .text("Facebook, Inc. (FB)");

        // Data to display initially
        // draw(data.slice(0, data.length-20));
		draw(data.slice(0, data.length-20), trades.slice(0, trades.length-1));
        // Only want this button to be active if the data has loaded
        // d3.select("button").on("click", function() { draw(data); }).style("display", "inline");
    });
	//trades come into this function:
    function draw(data, trades) {
        x.domain(data.map(candlestick.accessor().d));
        y.domain(techan.scale.plot.ohlc(data, candlestick.accessor()).domain());

        svg.selectAll("g.candlestick").datum(data).call(candlestick);
		//added trade arrows:
		svg.selectAll("g.tradearrow").datum(trades).call(tradearrow);
        svg.selectAll("g.x.axis").call(xAxis);
        svg.selectAll("g.y.axis").call(yAxis);
    }

	// function enterArrow(d) {
	// 	valueText.style("display", "inline");
	// 	refreshText(d);
	// }
	//
	// function outArrow() {
	// 	valueText.style("display", "none");
	// }

	function refreshText(d) {
		valueText.text("Trade: " + dateFormat(d.date) + ", " + d.type + ", " + valueFormat(d.price));
	}

	function enter() {
		coordsText.style("display", "inline");
	}

	function out() {
		coordsText.style("display", "none");
	}

	function move(coords) {
		coordsText.text(
			timeAnnotation.format()(coords.x) + ", " + ohlcAnnotation.format()(coords.y)
		);
	}

</script>

{{end}}
